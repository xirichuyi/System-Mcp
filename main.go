package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"mcp-example/internal/router"
	"mcp-example/internal/storage"
)

const (
	DefaultServerName    = "system-monitor-mcp"
	DefaultServerVersion = "1.0.0"
	DefaultDataDir       = "data"
)

type ServerConfig struct {
	ServerName    string
	ServerVersion string
	DataDir       string
	CacheEnabled  bool
}

func getDefaultConfig() *ServerConfig {
	return &ServerConfig{
		ServerName:    DefaultServerName,
		ServerVersion: DefaultServerVersion,
		DataDir:       DefaultDataDir,
		CacheEnabled:  true,
	}
}

func initializeStorage(config *ServerConfig) (*storage.JSONStorage, error) {
	if err := os.MkdirAll(config.DataDir, 0755); err != nil {
		return nil, fmt.Errorf("ÂàõÂª∫Êï∞ÊçÆÁõÆÂΩïÂ§±Ë¥•: %v", err)
	}

	jsonStorage, err := storage.NewJSONStorage(config.DataDir)
	if err != nil {
		return nil, fmt.Errorf("ÂàùÂßãÂåñÂ≠òÂÇ®Â§±Ë¥•: %v", err)
	}

	return jsonStorage, nil
}

func initializeCache() *storage.MemoryCache {
	return storage.NewMemoryCache()
}

func initializeRouter(config *ServerConfig, dataStorage *storage.JSONStorage, cache *storage.MemoryCache) *router.Router {
	return router.NewRouter(config.ServerName, config.ServerVersion, dataStorage, cache)
}

func setupSignalHandling(mcpRouter *router.Router) {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigChan
		mcpRouter.Stop()
		os.Exit(0)
	}()
}

func parseFlags() *ServerConfig {
	config := getDefaultConfig()

	flag.StringVar(&config.ServerName, "name", config.ServerName, "ÊúçÂä°Âô®ÂêçÁß∞")
	flag.StringVar(&config.DataDir, "data-dir", config.DataDir, "Êï∞ÊçÆÁõÆÂΩï")
	flag.BoolVar(&config.CacheEnabled, "cache", config.CacheEnabled, "ÂêØÁî®ÁºìÂ≠ò")

	help := flag.Bool("help", false, "ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ")
	version := flag.Bool("v", false, "ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ")

	flag.Parse()

	if *help {
		fmt.Printf("Á≥ªÁªüÁõëÊéß MCP ÊúçÂä°Âô® v%s\n\n", config.ServerVersion)
		fmt.Println("üí° Èõ∂ÈÖçÁΩÆÂêØÂä®ÔºöÁõ¥Êé•ËøêË°åÂç≥ÂèØÔºåÊó†ÈúÄ‰ªª‰ΩïÂèÇÊï∞ÔºÅ")
		fmt.Println("\nÁî®Ê≥ï:")
		fmt.Printf("  %s                    # ‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆÂêØÂä®\n", os.Args[0])
		fmt.Printf("  %s --name my-monitor  # Ëá™ÂÆö‰πâÊúçÂä°Âô®ÂêçÁß∞\n\n", os.Args[0])
		fmt.Println("ÂèØÈÄâÂèÇÊï∞:")
		flag.PrintDefaults()
		fmt.Println("\nÊîØÊåÅÁöÑÁõëÊéßÂ∑•ÂÖ∑:")
		fmt.Println("  ‚Ä¢ cpu_info      - CPU ‰ΩøÁî®ÁéáÂíåËØ¶ÁªÜ‰ø°ÊÅØ")
		fmt.Println("  ‚Ä¢ memory_info   - ÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµ")
		fmt.Println("  ‚Ä¢ top_processes - CPU/ÂÜÖÂ≠òÂç†Áî®ÊúÄÈ´òÁöÑËøõÁ®ã")
		fmt.Println("  ‚Ä¢ network_stats - ÁΩëÁªúËøûÊé•Áä∂ÊÄÅÂíå‰º†ËæìÈÄüÂ∫¶")
		fmt.Println("  ‚Ä¢ disk_info     - Á£ÅÁõò‰ΩøÁî®ÊÉÖÂÜµ")
		fmt.Println("  ‚Ä¢ system_overview - Á≥ªÁªüÁªºÂêàÊ¶ÇËßà")
		os.Exit(0)
	}

	if *version {
		fmt.Printf("%s v%s\n", config.ServerName, config.ServerVersion)
		os.Exit(0)
	}

	return config
}

func main() {
	log.SetOutput(os.Stderr)

	config := parseFlags()

	// ÂàùÂßãÂåñÁªÑ‰ª∂
	dataStorage, err := initializeStorage(config)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Â≠òÂÇ®ÂàùÂßãÂåñÂ§±Ë¥•: %v\n", err)
		os.Exit(1)
	}

	cache := initializeCache()
	mcpRouter := initializeRouter(config, dataStorage, cache)

	setupSignalHandling(mcpRouter)

	// ÂêØÂä®ÊúçÂä°Âô®
	if err := mcpRouter.Start(); err != nil {
		fmt.Fprintf(os.Stderr, "ÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•: %v\n", err)
		os.Exit(1)
	}
}
